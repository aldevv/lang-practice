* Ownership rules
1. Each value in rust has a variable that's called
it's owner

2. there can only be ONE owner at a time

3. when the owner goes OUT of scope, the value
will be dropped.
** Moves
# copy works for primitives, they implement the copy trait
#+BEGIN_SRC rust
    let s1: i32 = 10
    let s2 = s1;
    println!("{}", s1); 
    
#+END_SRC

# rust default's to move, it does NOT create shallow copies for types

# types are simply structs

#+BEGIN_SRC rust
    let s1: String = String::from("hello");
    let s2 = s1;
    println!("{}", s1); // will error because s1 is empty
    // what you want is to use clone

    let s2 = s1.clone();
    
#+END_SRC

ownership is given to functions if you don't pass a ref
#+BEGIN_SRC rust

    // this works
    fn gives_ownership() -> String {
        let some_string: String = String::from("hello");
        some_string
    }

    // this works
    fn takes_and_gives_back(a_string: String) -> String {
        a_string
    }

    fn calculate_length(s: &String) -> usize {
        let length: usize = s.len()
        length
    }
#+END_SRC

* Reference Rules
1. at any given time, you can have either ONE mutable reference or ANY number of immutable
   references

2. References must always be valid
** no multiple mut references
  this rule avoids data races

  #+BEGIN_SRC rust
    // this won't work
    let mut s: String = String::from("hello");
    let r1: &String = &mut s;
    let r2: &String = &mut s;
  #+END_SRC

  #+BEGIN_SRC rust
    // this is ok
    let s: String = String::from("hello");
    let r1: &String = &s;
    let r2: &String = &s;
      
  #+END_SRC

** no mixing mutable and immutable references

  #+BEGIN_SRC rust
    // this won't work
    let mut s: String = String::from("hello");
    let r1: &String = &s;
    let r2: &String = &s;
    let r3: &String = &mut s;
  #+END_SRC

  remember that scope goes up to where the variable was last used, so we could do this

  #+BEGIN_SRC rust
    // this will work
    let mut s: String = String::from("hello");
    let r1: &String = &s;
    let r2: &String = &s;
    println!("{}, {}", r1, r2);
    // since r1 and r2 were last used in the print, their scope is done
    let r3: &String = &mut s;
  #+END_SRC

* usize
On a 32 bit system, isize is the same as i32 and usize is the same as u32. On a 64 bit system, isize is the same as i64 and usize is the same as u64.

usize cannot be negative and is generally used for memory addresses, positions, indices, lengths (or sizes!).
isize can be negative, and is generally used for offsets to addresses, positions, indices, or lengths.

